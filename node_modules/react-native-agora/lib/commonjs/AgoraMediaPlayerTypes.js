"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SrcInfo = exports.PlayerUpdatedInfo = exports.PlayerStreamInfo = exports.PlayerPreloadEvent = exports.MediaStreamType = exports.MediaSource = exports.MediaPlayerState = exports.MediaPlayerMetadataType = exports.MediaPlayerEvent = exports.MediaPlayerError = exports.CacheStatistics = void 0;
require("./extension/AgoraMediaPlayerTypesExtension");
/**
 * The playback state.
 */
let MediaPlayerState = /*#__PURE__*/function (MediaPlayerState) {
  MediaPlayerState[MediaPlayerState["PlayerStateIdle"] = 0] = "PlayerStateIdle";
  MediaPlayerState[MediaPlayerState["PlayerStateOpening"] = 1] = "PlayerStateOpening";
  MediaPlayerState[MediaPlayerState["PlayerStateOpenCompleted"] = 2] = "PlayerStateOpenCompleted";
  MediaPlayerState[MediaPlayerState["PlayerStatePlaying"] = 3] = "PlayerStatePlaying";
  MediaPlayerState[MediaPlayerState["PlayerStatePaused"] = 4] = "PlayerStatePaused";
  MediaPlayerState[MediaPlayerState["PlayerStatePlaybackCompleted"] = 5] = "PlayerStatePlaybackCompleted";
  MediaPlayerState[MediaPlayerState["PlayerStatePlaybackAllLoopsCompleted"] = 6] = "PlayerStatePlaybackAllLoopsCompleted";
  MediaPlayerState[MediaPlayerState["PlayerStateStopped"] = 7] = "PlayerStateStopped";
  MediaPlayerState[MediaPlayerState["PlayerStatePausingInternal"] = 50] = "PlayerStatePausingInternal";
  MediaPlayerState[MediaPlayerState["PlayerStateStoppingInternal"] = 51] = "PlayerStateStoppingInternal";
  MediaPlayerState[MediaPlayerState["PlayerStateSeekingInternal"] = 52] = "PlayerStateSeekingInternal";
  MediaPlayerState[MediaPlayerState["PlayerStateGettingInternal"] = 53] = "PlayerStateGettingInternal";
  MediaPlayerState[MediaPlayerState["PlayerStateNoneInternal"] = 54] = "PlayerStateNoneInternal";
  MediaPlayerState[MediaPlayerState["PlayerStateDoNothingInternal"] = 55] = "PlayerStateDoNothingInternal";
  MediaPlayerState[MediaPlayerState["PlayerStateSetTrackInternal"] = 56] = "PlayerStateSetTrackInternal";
  MediaPlayerState[MediaPlayerState["PlayerStateFailed"] = 100] = "PlayerStateFailed";
  return MediaPlayerState;
}({});
/**
 * Error codes of the media player.
 */
exports.MediaPlayerState = MediaPlayerState;
let MediaPlayerError = /*#__PURE__*/function (MediaPlayerError) {
  MediaPlayerError[MediaPlayerError["PlayerErrorNone"] = 0] = "PlayerErrorNone";
  MediaPlayerError[MediaPlayerError["PlayerErrorInvalidArguments"] = -1] = "PlayerErrorInvalidArguments";
  MediaPlayerError[MediaPlayerError["PlayerErrorInternal"] = -2] = "PlayerErrorInternal";
  MediaPlayerError[MediaPlayerError["PlayerErrorNoResource"] = -3] = "PlayerErrorNoResource";
  MediaPlayerError[MediaPlayerError["PlayerErrorInvalidMediaSource"] = -4] = "PlayerErrorInvalidMediaSource";
  MediaPlayerError[MediaPlayerError["PlayerErrorUnknownStreamType"] = -5] = "PlayerErrorUnknownStreamType";
  MediaPlayerError[MediaPlayerError["PlayerErrorObjNotInitialized"] = -6] = "PlayerErrorObjNotInitialized";
  MediaPlayerError[MediaPlayerError["PlayerErrorCodecNotSupported"] = -7] = "PlayerErrorCodecNotSupported";
  MediaPlayerError[MediaPlayerError["PlayerErrorVideoRenderFailed"] = -8] = "PlayerErrorVideoRenderFailed";
  MediaPlayerError[MediaPlayerError["PlayerErrorInvalidState"] = -9] = "PlayerErrorInvalidState";
  MediaPlayerError[MediaPlayerError["PlayerErrorUrlNotFound"] = -10] = "PlayerErrorUrlNotFound";
  MediaPlayerError[MediaPlayerError["PlayerErrorInvalidConnectionState"] = -11] = "PlayerErrorInvalidConnectionState";
  MediaPlayerError[MediaPlayerError["PlayerErrorSrcBufferUnderflow"] = -12] = "PlayerErrorSrcBufferUnderflow";
  MediaPlayerError[MediaPlayerError["PlayerErrorInterrupted"] = -13] = "PlayerErrorInterrupted";
  MediaPlayerError[MediaPlayerError["PlayerErrorNotSupported"] = -14] = "PlayerErrorNotSupported";
  MediaPlayerError[MediaPlayerError["PlayerErrorTokenExpired"] = -15] = "PlayerErrorTokenExpired";
  MediaPlayerError[MediaPlayerError["PlayerErrorIpExpired"] = -16] = "PlayerErrorIpExpired";
  MediaPlayerError[MediaPlayerError["PlayerErrorUnknown"] = -17] = "PlayerErrorUnknown";
  return MediaPlayerError;
}({});
/**
 * The type of the media stream.
 */
exports.MediaPlayerError = MediaPlayerError;
let MediaStreamType = /*#__PURE__*/function (MediaStreamType) {
  MediaStreamType[MediaStreamType["StreamTypeUnknown"] = 0] = "StreamTypeUnknown";
  MediaStreamType[MediaStreamType["StreamTypeVideo"] = 1] = "StreamTypeVideo";
  MediaStreamType[MediaStreamType["StreamTypeAudio"] = 2] = "StreamTypeAudio";
  MediaStreamType[MediaStreamType["StreamTypeSubtitle"] = 3] = "StreamTypeSubtitle";
  return MediaStreamType;
}({});
/**
 * Media player events.
 */
exports.MediaStreamType = MediaStreamType;
let MediaPlayerEvent = /*#__PURE__*/function (MediaPlayerEvent) {
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventSeekBegin"] = 0] = "PlayerEventSeekBegin";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventSeekComplete"] = 1] = "PlayerEventSeekComplete";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventSeekError"] = 2] = "PlayerEventSeekError";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventAudioTrackChanged"] = 5] = "PlayerEventAudioTrackChanged";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventBufferLow"] = 6] = "PlayerEventBufferLow";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventBufferRecover"] = 7] = "PlayerEventBufferRecover";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventFreezeStart"] = 8] = "PlayerEventFreezeStart";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventFreezeStop"] = 9] = "PlayerEventFreezeStop";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventSwitchBegin"] = 10] = "PlayerEventSwitchBegin";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventSwitchComplete"] = 11] = "PlayerEventSwitchComplete";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventSwitchError"] = 12] = "PlayerEventSwitchError";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventFirstDisplayed"] = 13] = "PlayerEventFirstDisplayed";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventReachCacheFileMaxCount"] = 14] = "PlayerEventReachCacheFileMaxCount";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventReachCacheFileMaxSize"] = 15] = "PlayerEventReachCacheFileMaxSize";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventTryOpenStart"] = 16] = "PlayerEventTryOpenStart";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventTryOpenSucceed"] = 17] = "PlayerEventTryOpenSucceed";
  MediaPlayerEvent[MediaPlayerEvent["PlayerEventTryOpenFailed"] = 18] = "PlayerEventTryOpenFailed";
  return MediaPlayerEvent;
}({});
/**
 * Events that occur when media resources are preloaded.
 */
exports.MediaPlayerEvent = MediaPlayerEvent;
let PlayerPreloadEvent = /*#__PURE__*/function (PlayerPreloadEvent) {
  PlayerPreloadEvent[PlayerPreloadEvent["PlayerPreloadEventBegin"] = 0] = "PlayerPreloadEventBegin";
  PlayerPreloadEvent[PlayerPreloadEvent["PlayerPreloadEventComplete"] = 1] = "PlayerPreloadEventComplete";
  PlayerPreloadEvent[PlayerPreloadEvent["PlayerPreloadEventError"] = 2] = "PlayerPreloadEventError";
  return PlayerPreloadEvent;
}({});
/**
 * The detailed information of the media stream.
 */
exports.PlayerPreloadEvent = PlayerPreloadEvent;
class PlayerStreamInfo {}

/**
 * Information about the video bitrate of the media resource being played.
 */
exports.PlayerStreamInfo = PlayerStreamInfo;
class SrcInfo {}

/**
 * The type of media metadata.
 */
exports.SrcInfo = SrcInfo;
let MediaPlayerMetadataType = /*#__PURE__*/function (MediaPlayerMetadataType) {
  MediaPlayerMetadataType[MediaPlayerMetadataType["PlayerMetadataTypeUnknown"] = 0] = "PlayerMetadataTypeUnknown";
  MediaPlayerMetadataType[MediaPlayerMetadataType["PlayerMetadataTypeSei"] = 1] = "PlayerMetadataTypeSei";
  return MediaPlayerMetadataType;
}({});
/**
 * Statistics about the media files being cached.
 */
exports.MediaPlayerMetadataType = MediaPlayerMetadataType;
class CacheStatistics {}

/**
 * Information related to the media player.
 */
exports.CacheStatistics = CacheStatistics;
class PlayerUpdatedInfo {}

/**
 * Information related to the media file to be played and the playback scenario configurations.
 */
exports.PlayerUpdatedInfo = PlayerUpdatedInfo;
class MediaSource {}
exports.MediaSource = MediaSource;
//# sourceMappingURL=AgoraMediaPlayerTypes.js.map