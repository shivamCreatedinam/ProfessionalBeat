"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalSpatialAudioEngineInternal = void 0;
var _IAgoraSpatialAudioImpl = require("../impl/IAgoraSpatialAudioImpl");
class LocalSpatialAudioEngineInternal extends _IAgoraSpatialAudioImpl.ILocalSpatialAudioEngineImpl {
  getApiTypeFromRelease() {
    return 'LocalSpatialAudioEngine_release';
  }
  getApiTypeFromSetMaxAudioRecvCount(maxCount) {
    return 'LocalSpatialAudioEngine_setMaxAudioRecvCount';
  }
  getApiTypeFromSetAudioRecvRange(range) {
    return 'LocalSpatialAudioEngine_setAudioRecvRange';
  }
  getApiTypeFromSetDistanceUnit(unit) {
    return 'LocalSpatialAudioEngine_setDistanceUnit';
  }
  getApiTypeFromUpdateSelfPosition(position, axisForward, axisRight, axisUp) {
    return 'LocalSpatialAudioEngine_updateSelfPosition';
  }
  getApiTypeFromUpdateSelfPositionEx(position, axisForward, axisRight, axisUp, connection) {
    return 'LocalSpatialAudioEngine_updateSelfPositionEx';
  }
  getApiTypeFromUpdatePlayerPositionInfo(playerId, positionInfo) {
    return 'LocalSpatialAudioEngine_updatePlayerPositionInfo';
  }
  getApiTypeFromSetParameters(params) {
    return 'LocalSpatialAudioEngine_setParameters';
  }
  getApiTypeFromMuteLocalAudioStream(mute) {
    return 'LocalSpatialAudioEngine_muteLocalAudioStream';
  }
  getApiTypeFromMuteAllRemoteAudioStreams(mute) {
    return 'LocalSpatialAudioEngine_muteAllRemoteAudioStreams';
  }
  getApiTypeFromSetZones(zones, zoneCount) {
    return 'LocalSpatialAudioEngine_setZones';
  }
  getApiTypeFromSetPlayerAttenuation(playerId, attenuation, forceSet) {
    return 'LocalSpatialAudioEngine_setPlayerAttenuation';
  }
  getApiTypeFromMuteRemoteAudioStream(uid, mute) {
    return 'LocalSpatialAudioEngine_muteRemoteAudioStream';
  }
}
exports.LocalSpatialAudioEngineInternal = LocalSpatialAudioEngineInternal;
//# sourceMappingURL=LocalSpatialAudioEngineInternal.js.map