"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MusicCollectionImpl = exports.MusicChartCollectionImpl = exports.IMusicPlayerImpl = exports.IMusicContentCenterImpl = void 0;
exports.processIMusicContentCenterEventHandler = processIMusicContentCenterEventHandler;
var _IAgoraMediaPlayerImpl = require("./IAgoraMediaPlayerImpl");
var _IrisApiEngine = require("../internal/IrisApiEngine");
// @ts-ignore
class MusicChartCollectionImpl {
  getCount() {
    const apiType = this.getApiTypeFromGetCount();
    const jsonParams = {};
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromGetCount() {
    return 'MusicChartCollection_getCount';
  }
  get(index) {
    const apiType = this.getApiTypeFromGet(index);
    const jsonParams = {
      index: index,
      toJSON: () => {
        return {
          index: index
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromGet(index) {
    return 'MusicChartCollection_get';
  }
}

// @ts-ignore
exports.MusicChartCollectionImpl = MusicChartCollectionImpl;
class MusicCollectionImpl {
  getCount() {
    const apiType = this.getApiTypeFromGetCount();
    const jsonParams = {};
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromGetCount() {
    return 'MusicCollection_getCount';
  }
  getTotal() {
    const apiType = this.getApiTypeFromGetTotal();
    const jsonParams = {};
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromGetTotal() {
    return 'MusicCollection_getTotal';
  }
  getPage() {
    const apiType = this.getApiTypeFromGetPage();
    const jsonParams = {};
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromGetPage() {
    return 'MusicCollection_getPage';
  }
  getPageSize() {
    const apiType = this.getApiTypeFromGetPageSize();
    const jsonParams = {};
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromGetPageSize() {
    return 'MusicCollection_getPageSize';
  }
  getMusic(index) {
    const apiType = this.getApiTypeFromGetMusic(index);
    const jsonParams = {
      index: index,
      toJSON: () => {
        return {
          index: index
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromGetMusic(index) {
    return 'MusicCollection_getMusic';
  }
}
exports.MusicCollectionImpl = MusicCollectionImpl;
function processIMusicContentCenterEventHandler(handler, event, jsonParams) {
  switch (event) {
    case 'onMusicChartsResult':
      if (handler.onMusicChartsResult !== undefined) {
        handler.onMusicChartsResult(jsonParams.requestId, jsonParams.result, jsonParams.error_code);
      }
      break;
    case 'onMusicCollectionResult':
      if (handler.onMusicCollectionResult !== undefined) {
        handler.onMusicCollectionResult(jsonParams.requestId, jsonParams.result, jsonParams.error_code);
      }
      break;
    case 'onLyricResult':
      if (handler.onLyricResult !== undefined) {
        handler.onLyricResult(jsonParams.requestId, jsonParams.lyricUrl, jsonParams.error_code);
      }
      break;
    case 'onPreLoadEvent':
      if (handler.onPreLoadEvent !== undefined) {
        handler.onPreLoadEvent(jsonParams.songCode, jsonParams.percent, jsonParams.lyricUrl, jsonParams.status, jsonParams.error_code);
      }
      break;
  }
}

// @ts-ignore
class IMusicPlayerImpl extends _IAgoraMediaPlayerImpl.IMediaPlayerImpl {
  openWithSongCode(songCode) {
    let startPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    const apiType = this.getApiTypeFromOpenWithSongCode(songCode, startPos);
    const jsonParams = {
      songCode: songCode,
      startPos: startPos,
      toJSON: () => {
        return {
          songCode: songCode,
          startPos: startPos
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromOpenWithSongCode(songCode) {
    let startPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return 'MusicPlayer_openWithSongCode';
  }
}

// @ts-ignore
exports.IMusicPlayerImpl = IMusicPlayerImpl;
class IMusicContentCenterImpl {
  initialize(configuration) {
    const apiType = this.getApiTypeFromInitialize(configuration);
    const jsonParams = {
      configuration: configuration,
      toJSON: () => {
        return {
          configuration: configuration
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromInitialize(configuration) {
    return 'MusicContentCenter_initialize';
  }
  renewToken(token) {
    const apiType = this.getApiTypeFromRenewToken(token);
    const jsonParams = {
      token: token,
      toJSON: () => {
        return {
          token: token
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromRenewToken(token) {
    return 'MusicContentCenter_renewToken';
  }
  release() {
    const apiType = this.getApiTypeFromRelease();
    const jsonParams = {};
    _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
  }
  getApiTypeFromRelease() {
    return 'MusicContentCenter_release';
  }
  registerEventHandler(eventHandler) {
    const apiType = this.getApiTypeFromRegisterEventHandler(eventHandler);
    const jsonParams = {
      eventHandler: eventHandler,
      toJSON: () => {
        return {};
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromRegisterEventHandler(eventHandler) {
    return 'MusicContentCenter_registerEventHandler';
  }
  unregisterEventHandler() {
    const apiType = this.getApiTypeFromUnregisterEventHandler();
    const jsonParams = {};
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromUnregisterEventHandler() {
    return 'MusicContentCenter_unregisterEventHandler';
  }
  createMusicPlayer() {
    const apiType = this.getApiTypeFromCreateMusicPlayer();
    const jsonParams = {};
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromCreateMusicPlayer() {
    return 'MusicContentCenter_createMusicPlayer';
  }
  getMusicCharts() {
    const apiType = this.getApiTypeFromGetMusicCharts();
    const jsonParams = {};
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    const requestId = jsonResults.requestId;
    return requestId;
  }
  getApiTypeFromGetMusicCharts() {
    return 'MusicContentCenter_getMusicCharts';
  }
  getMusicCollectionByMusicChartId(musicChartId, page, pageSize, jsonOption) {
    const apiType = this.getApiTypeFromGetMusicCollectionByMusicChartId(musicChartId, page, pageSize, jsonOption);
    const jsonParams = {
      musicChartId: musicChartId,
      page: page,
      pageSize: pageSize,
      jsonOption: jsonOption,
      toJSON: () => {
        return {
          musicChartId: musicChartId,
          page: page,
          pageSize: pageSize,
          jsonOption: jsonOption
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    const requestId = jsonResults.requestId;
    return requestId;
  }
  getApiTypeFromGetMusicCollectionByMusicChartId(musicChartId, page, pageSize, jsonOption) {
    return 'MusicContentCenter_getMusicCollectionByMusicChartId';
  }
  searchMusic(requestId, keyWord, page, pageSize, jsonOption) {
    const apiType = this.getApiTypeFromSearchMusic(requestId, keyWord, page, pageSize, jsonOption);
    const jsonParams = {
      requestId: requestId,
      keyWord: keyWord,
      page: page,
      pageSize: pageSize,
      jsonOption: jsonOption,
      toJSON: () => {
        return {
          requestId: requestId,
          keyWord: keyWord,
          page: page,
          pageSize: pageSize,
          jsonOption: jsonOption
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromSearchMusic(requestId, keyWord, page, pageSize, jsonOption) {
    return 'MusicContentCenter_searchMusic';
  }
  preload(songCode, jsonOption) {
    const apiType = this.getApiTypeFromPreload(songCode, jsonOption);
    const jsonParams = {
      songCode: songCode,
      jsonOption: jsonOption,
      toJSON: () => {
        return {
          songCode: songCode,
          jsonOption: jsonOption
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromPreload(songCode, jsonOption) {
    return 'MusicContentCenter_preload';
  }
  removeCache(songCode) {
    const apiType = this.getApiTypeFromRemoveCache(songCode);
    const jsonParams = {
      songCode: songCode,
      toJSON: () => {
        return {
          songCode: songCode
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromRemoveCache(songCode) {
    return 'MusicContentCenter_removeCache';
  }
  getCaches() {
    const apiType = this.getApiTypeFromGetCaches();
    const jsonParams = {};
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    const cacheInfo = jsonResults.cacheInfo;
    const cacheInfoSize = jsonResults.cacheInfoSize;
    return {
      cacheInfo,
      cacheInfoSize
    };
  }
  getApiTypeFromGetCaches() {
    return 'MusicContentCenter_getCaches';
  }
  isPreloaded(songCode) {
    const apiType = this.getApiTypeFromIsPreloaded(songCode);
    const jsonParams = {
      songCode: songCode,
      toJSON: () => {
        return {
          songCode: songCode
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromIsPreloaded(songCode) {
    return 'MusicContentCenter_isPreloaded';
  }
  getLyric(songCode) {
    let lyricType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    const apiType = this.getApiTypeFromGetLyric(songCode, lyricType);
    const jsonParams = {
      songCode: songCode,
      LyricType: lyricType,
      toJSON: () => {
        return {
          songCode: songCode,
          LyricType: lyricType
        };
      }
    };
    const jsonResults = _IrisApiEngine.callIrisApi.call(this, apiType, jsonParams);
    const requestId = jsonResults.requestId;
    return requestId;
  }
  getApiTypeFromGetLyric(songCode) {
    let lyricType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return 'MusicContentCenter_getLyric';
  }
}
exports.IMusicContentCenterImpl = IMusicContentCenterImpl;
//# sourceMappingURL=IAgoraMusicContentCenterImpl.js.map